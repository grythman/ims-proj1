{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import{getToken,setToken,removeToken}from'../utils/auth';import{login as loginApi,getMe}from'../services/api';import{toast}from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);// Function to fetch user data\nconst fetchUserData=async()=>{try{const response=await getMe();setUser(response.data);return response.data;}catch(error){console.error('Failed to fetch user data:',error);removeToken();setUser(null);return null;}};// Check authentication status on mount\nuseEffect(()=>{const initAuth=async()=>{const token=getToken();if(token){try{await fetchUserData();}catch(error){console.error('Auth initialization failed:',error);removeToken();}}setLoading(false);};initAuth();},[]);const login=async credentials=>{try{const response=await loginApi(credentials);console.log('Login response:',response);const{token,user:userData}=response.data;if(!token){throw new Error('No token received');}// Store the token\nsetToken(token);// Set user data if it was returned with login, otherwise fetch it\nif(userData){setUser(userData);}else{await fetchUserData();}return true;}catch(error){var _error$response,_error$response$data;console.error('Login failed:',error);toast.error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Login failed');return false;}};const logout=()=>{removeToken();setUser(null);// Optionally redirect to login page\nwindow.location.href='/login';};const value={user,login,logout,loading,isAuthenticated:!!user};if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export default AuthContext;","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","getToken","setToken","removeToken","login","loginApi","getMe","toast","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","loading","setLoading","fetchUserData","response","data","error","console","initAuth","token","credentials","log","userData","Error","_error$response","_error$response$data","message","logout","window","location","href","value","isAuthenticated","Provider","useAuth","context"],"sources":["C:/Users/Admin/ims-proj/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { getToken, setToken, removeToken } from '../utils/auth';\nimport { login as loginApi, getMe } from '../services/api';\nimport { toast } from 'react-hot-toast';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Function to fetch user data\n  const fetchUserData = async () => {\n    try {\n      const response = await getMe();\n      setUser(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch user data:', error);\n      removeToken();\n      setUser(null);\n      return null;\n    }\n  };\n\n  // Check authentication status on mount\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = getToken();\n      if (token) {\n        try {\n          await fetchUserData();\n        } catch (error) {\n          console.error('Auth initialization failed:', error);\n          removeToken();\n        }\n      }\n      setLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (credentials) => {\n    try {\n      const response = await loginApi(credentials);\n      console.log('Login response:', response);\n\n      const { token, user: userData } = response.data;\n      \n      if (!token) {\n        throw new Error('No token received');\n      }\n\n      // Store the token\n      setToken(token);\n\n      // Set user data if it was returned with login, otherwise fetch it\n      if (userData) {\n        setUser(userData);\n      } else {\n        await fetchUserData();\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Login failed:', error);\n      toast.error(error.response?.data?.message || 'Login failed');\n      return false;\n    }\n  };\n\n  const logout = () => {\n    removeToken();\n    setUser(null);\n    // Optionally redirect to login page\n    window.location.href = '/login';\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    loading,\n    isAuthenticated: !!user,\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAC7E,OAASC,QAAQ,CAAEC,QAAQ,CAAEC,WAAW,KAAQ,eAAe,CAC/D,OAASC,KAAK,GAAI,CAAAC,QAAQ,CAAEC,KAAK,KAAQ,iBAAiB,CAC1D,OAASC,KAAK,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAExC,KAAM,CAAAC,WAAW,cAAGb,aAAa,CAAC,IAAI,CAAC,CAEvC,MAAO,MAAM,CAAAc,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGjB,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACkB,OAAO,CAAEC,UAAU,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CAE5C;AACA,KAAM,CAAAoB,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAb,KAAK,CAAC,CAAC,CAC9BS,OAAO,CAACI,QAAQ,CAACC,IAAI,CAAC,CACtB,MAAO,CAAAD,QAAQ,CAACC,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClDlB,WAAW,CAAC,CAAC,CACbY,OAAO,CAAC,IAAI,CAAC,CACb,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACAf,SAAS,CAAC,IAAM,CACd,KAAM,CAAAuB,QAAQ,CAAG,KAAAA,CAAA,GAAY,CAC3B,KAAM,CAAAC,KAAK,CAAGvB,QAAQ,CAAC,CAAC,CACxB,GAAIuB,KAAK,CAAE,CACT,GAAI,CACF,KAAM,CAAAN,aAAa,CAAC,CAAC,CACvB,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnDlB,WAAW,CAAC,CAAC,CACf,CACF,CACAc,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAEDM,QAAQ,CAAC,CAAC,CACZ,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAnB,KAAK,CAAG,KAAO,CAAAqB,WAAW,EAAK,CACnC,GAAI,CACF,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAd,QAAQ,CAACoB,WAAW,CAAC,CAC5CH,OAAO,CAACI,GAAG,CAAC,iBAAiB,CAAEP,QAAQ,CAAC,CAExC,KAAM,CAAEK,KAAK,CAAEV,IAAI,CAAEa,QAAS,CAAC,CAAGR,QAAQ,CAACC,IAAI,CAE/C,GAAI,CAACI,KAAK,CAAE,CACV,KAAM,IAAI,CAAAI,KAAK,CAAC,mBAAmB,CAAC,CACtC,CAEA;AACA1B,QAAQ,CAACsB,KAAK,CAAC,CAEf;AACA,GAAIG,QAAQ,CAAE,CACZZ,OAAO,CAACY,QAAQ,CAAC,CACnB,CAAC,IAAM,CACL,KAAM,CAAAT,aAAa,CAAC,CAAC,CACvB,CAEA,MAAO,KAAI,CACb,CAAE,MAAOG,KAAK,CAAE,KAAAQ,eAAA,CAAAC,oBAAA,CACdR,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACrCd,KAAK,CAACc,KAAK,CAAC,EAAAQ,eAAA,CAAAR,KAAK,CAACF,QAAQ,UAAAU,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBT,IAAI,UAAAU,oBAAA,iBAApBA,oBAAA,CAAsBC,OAAO,GAAI,cAAc,CAAC,CAC5D,MAAO,MAAK,CACd,CACF,CAAC,CAED,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CACnB7B,WAAW,CAAC,CAAC,CACbY,OAAO,CAAC,IAAI,CAAC,CACb;AACAkB,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CACjC,CAAC,CAED,KAAM,CAAAC,KAAK,CAAG,CACZtB,IAAI,CACJV,KAAK,CACL4B,MAAM,CACNhB,OAAO,CACPqB,eAAe,CAAE,CAAC,CAACvB,IACrB,CAAC,CAED,GAAIE,OAAO,CAAE,CACX,mBAAOP,IAAA,QAAAI,QAAA,CAAK,YAAU,CAAK,CAAC,CAC9B,CAEA,mBACEJ,IAAA,CAACC,WAAW,CAAC4B,QAAQ,EAACF,KAAK,CAAEA,KAAM,CAAAvB,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAA0B,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGzC,UAAU,CAACW,WAAW,CAAC,CACvC,GAAI,CAAC8B,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAZ,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAY,OAAO,CAChB,CAAC,CAED,cAAe,CAAA9B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}