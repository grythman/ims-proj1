{"ast":null,"code":"import axios from 'axios';\nimport { getToken, removeToken } from '../utils/auth';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 second timeout\n});\n\n// Request interceptor for API calls\napi.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for API calls\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // Handle 401 Unauthorized errors\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n\n    // Handle token refresh or logout\n    if (error.response.data.message === 'Token expired') {\n      try {\n        // Implement token refresh logic here\n        const response = await api.post('/api/auth/refresh');\n        const {\n          token\n        } = response.data;\n\n        // Update token and retry request\n        originalRequest.headers.Authorization = `Bearer ${token}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        // If refresh fails, logout user\n        removeToken();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n\n    // For other 401 errors, logout user\n    removeToken();\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default api;\n\n// Auth endpoints\nexport const authService = {\n  login: credentials => api.post('/api/auth/login', credentials),\n  register: userData => api.post('/api/auth/register', userData),\n  logout: () => api.post('/api/auth/logout'),\n  refreshToken: () => api.post('/api/auth/refresh'),\n  forgotPassword: email => api.post('/api/auth/forgot-password', {\n    email\n  }),\n  resetPassword: (token, password) => api.post('/api/auth/reset-password', {\n    token,\n    password\n  })\n};","map":{"version":3,"names":["axios","getToken","removeToken","api","create","baseURL","process","env","REACT_APP_API_URL","headers","timeout","interceptors","request","use","config","token","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","data","message","post","refreshError","window","location","href","authService","login","credentials","register","userData","logout","refreshToken","forgotPassword","email","resetPassword","password"],"sources":["C:/Users/Admin/ims-proj/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { getToken, removeToken } from '../utils/auth';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 second timeout\n});\n\n// Request interceptor for API calls\napi.interceptors.request.use(\n  (config) => {\n    const token = getToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for API calls\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    // Handle 401 Unauthorized errors\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      \n      // Handle token refresh or logout\n      if (error.response.data.message === 'Token expired') {\n        try {\n          // Implement token refresh logic here\n          const response = await api.post('/api/auth/refresh');\n          const { token } = response.data;\n          \n          // Update token and retry request\n          originalRequest.headers.Authorization = `Bearer ${token}`;\n          return api(originalRequest);\n        } catch (refreshError) {\n          // If refresh fails, logout user\n          removeToken();\n          window.location.href = '/login';\n          return Promise.reject(refreshError);\n        }\n      }\n      \n      // For other 401 errors, logout user\n      removeToken();\n      window.location.href = '/login';\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n\n// Auth endpoints\nexport const authService = {\n  login: (credentials) => api.post('/api/auth/login', credentials),\n  register: (userData) => api.post('/api/auth/register', userData),\n  logout: () => api.post('/api/auth/logout'),\n  refreshToken: () => api.post('/api/auth/refresh'),\n  forgotPassword: (email) => api.post('/api/auth/forgot-password', { email }),\n  resetPassword: (token, password) => \n    api.post('/api/auth/reset-password', { token, password }),\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,eAAe;AAErD,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACjEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGd,QAAQ,CAAC,CAAC;EACxB,IAAIc,KAAK,EAAE;IACTD,MAAM,CAACL,OAAO,CAACO,aAAa,GAAG,UAAUD,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAG,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,GAAG,CAACQ,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC1BO,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,MAAMC,eAAe,GAAGL,KAAK,CAACH,MAAM;;EAEpC;EACA,IAAI,EAAAO,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC7DF,eAAe,CAACE,MAAM,GAAG,IAAI;;IAE7B;IACA,IAAIP,KAAK,CAACG,QAAQ,CAACK,IAAI,CAACC,OAAO,KAAK,eAAe,EAAE;MACnD,IAAI;QACF;QACA,MAAMN,QAAQ,GAAG,MAAMjB,GAAG,CAACwB,IAAI,CAAC,mBAAmB,CAAC;QACpD,MAAM;UAAEZ;QAAM,CAAC,GAAGK,QAAQ,CAACK,IAAI;;QAE/B;QACAH,eAAe,CAACb,OAAO,CAACO,aAAa,GAAG,UAAUD,KAAK,EAAE;QACzD,OAAOZ,GAAG,CAACmB,eAAe,CAAC;MAC7B,CAAC,CAAC,OAAOM,YAAY,EAAE;QACrB;QACA1B,WAAW,CAAC,CAAC;QACb2B,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;QAC/B,OAAOb,OAAO,CAACC,MAAM,CAACS,YAAY,CAAC;MACrC;IACF;;IAEA;IACA1B,WAAW,CAAC,CAAC;IACb2B,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EAEA,OAAOb,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,GAAG;;AAElB;AACA,OAAO,MAAM6B,WAAW,GAAG;EACzBC,KAAK,EAAGC,WAAW,IAAK/B,GAAG,CAACwB,IAAI,CAAC,iBAAiB,EAAEO,WAAW,CAAC;EAChEC,QAAQ,EAAGC,QAAQ,IAAKjC,GAAG,CAACwB,IAAI,CAAC,oBAAoB,EAAES,QAAQ,CAAC;EAChEC,MAAM,EAAEA,CAAA,KAAMlC,GAAG,CAACwB,IAAI,CAAC,kBAAkB,CAAC;EAC1CW,YAAY,EAAEA,CAAA,KAAMnC,GAAG,CAACwB,IAAI,CAAC,mBAAmB,CAAC;EACjDY,cAAc,EAAGC,KAAK,IAAKrC,GAAG,CAACwB,IAAI,CAAC,2BAA2B,EAAE;IAAEa;EAAM,CAAC,CAAC;EAC3EC,aAAa,EAAEA,CAAC1B,KAAK,EAAE2B,QAAQ,KAC7BvC,GAAG,CAACwB,IAAI,CAAC,0BAA0B,EAAE;IAAEZ,KAAK;IAAE2B;EAAS,CAAC;AAC5D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}