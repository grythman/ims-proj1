{"ast":null,"code":"import axios from 'axios';\nimport { getToken, removeToken } from '../utils/auth';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    if (error.response.data.message === 'Token expired') {\n      try {\n        const response = await api.post('/api/auth/refresh');\n        const {\n          token\n        } = response.data;\n        originalRequest.headers.Authorization = `Bearer ${token}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        removeToken();\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n    removeToken();\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth endpoints - Export these directly\nexport const login = async credentials => {\n  try {\n    const response = await api.post('/api/auth/login/', {\n      username: credentials.username,\n      password: credentials.password\n    });\n\n    // Log the response to see what we're getting\n    console.log('Login response:', response);\n\n    // Check if we have a token in the response\n    if (!response.data.token && !response.data.access) {\n      throw new Error('No authentication token received');\n    }\n\n    // Return the standardized response\n    return {\n      data: {\n        token: response.data.token || response.data.access,\n        // Handle both token formats\n        user: response.data.user || response.data.profile || {} // Handle both user data formats\n      }\n    };\n  } catch (error) {\n    var _error$response2;\n    console.error('Login error details:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n    throw error;\n  }\n};\nexport const register = userData => api.post('/api/auth/register', userData);\nexport const logout = () => api.post('/api/auth/logout');\nexport const getMe = () => api.get('/api/users/me');\nexport const refreshToken = () => api.post('/api/auth/refresh');\nexport const forgotPassword = email => api.post('/api/auth/forgot-password', {\n  email\n});\nexport const resetPassword = (token, password) => api.post('/api/auth/reset-password', {\n  token,\n  password\n});\n\n// Also export as part of authService object\nexport const authService = {\n  login,\n  register,\n  logout,\n  getMe,\n  refreshToken,\n  forgotPassword,\n  resetPassword\n};\nexport default api;","map":{"version":3,"names":["axios","getToken","removeToken","api","create","baseURL","process","env","REACT_APP_API_URL","headers","timeout","interceptors","request","use","config","token","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","data","message","post","refreshError","window","location","href","login","credentials","username","password","console","log","access","Error","user","profile","_error$response2","register","userData","logout","getMe","get","refreshToken","forgotPassword","email","resetPassword","authService"],"sources":["C:/Users/Admin/ims-proj/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { getToken, removeToken } from '../utils/auth';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000,\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    const token = getToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      \n      if (error.response.data.message === 'Token expired') {\n        try {\n          const response = await api.post('/api/auth/refresh');\n          const { token } = response.data;\n          originalRequest.headers.Authorization = `Bearer ${token}`;\n          return api(originalRequest);\n        } catch (refreshError) {\n          removeToken();\n          window.location.href = '/login';\n          return Promise.reject(refreshError);\n        }\n      }\n      \n      removeToken();\n      window.location.href = '/login';\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Auth endpoints - Export these directly\nexport const login = async (credentials) => {\n  try {\n    const response = await api.post('/api/auth/login/', {\n      username: credentials.username,\n      password: credentials.password,\n    });\n    \n    // Log the response to see what we're getting\n    console.log('Login response:', response);\n    \n    // Check if we have a token in the response\n    if (!response.data.token && !response.data.access) {\n      throw new Error('No authentication token received');\n    }\n    \n    // Return the standardized response\n    return {\n      data: {\n        token: response.data.token || response.data.access, // Handle both token formats\n        user: response.data.user || response.data.profile || {} // Handle both user data formats\n      }\n    };\n  } catch (error) {\n    console.error('Login error details:', error.response?.data);\n    throw error;\n  }\n};\nexport const register = (userData) => api.post('/api/auth/register', userData);\nexport const logout = () => api.post('/api/auth/logout');\nexport const getMe = () => api.get('/api/users/me');\nexport const refreshToken = () => api.post('/api/auth/refresh');\nexport const forgotPassword = (email) => api.post('/api/auth/forgot-password', { email });\nexport const resetPassword = (token, password) => \n  api.post('/api/auth/reset-password', { token, password });\n\n// Also export as part of authService object\nexport const authService = {\n  login,\n  register,\n  logout,\n  getMe,\n  refreshToken,\n  forgotPassword,\n  resetPassword,\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}