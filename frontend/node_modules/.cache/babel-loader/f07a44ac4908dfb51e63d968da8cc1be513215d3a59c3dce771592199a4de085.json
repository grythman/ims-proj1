{"ast":null,"code":"const TOKEN_KEY = 'auth_token';\nexport const setToken = token => {\n  if (typeof token === 'string') {\n    localStorage.setItem(TOKEN_KEY, token);\n  } else {\n    console.error('Invalid token format:', token);\n  }\n};\nexport const getToken = () => {\n  return localStorage.getItem(TOKEN_KEY);\n};\nexport const removeToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n};\nexport const isAuthenticated = () => {\n  const token = getToken();\n  return !!token;\n};","map":{"version":3,"names":["TOKEN_KEY","setToken","token","localStorage","setItem","console","error","getToken","getItem","removeToken","removeItem","isAuthenticated"],"sources":["C:/Users/Admin/ims-proj/frontend/src/utils/auth.js"],"sourcesContent":["const TOKEN_KEY = 'auth_token';\n\nexport const setToken = (token) => {\n  if (typeof token === 'string') {\n    localStorage.setItem(TOKEN_KEY, token);\n  } else {\n    console.error('Invalid token format:', token);\n  }\n};\n\nexport const getToken = () => {\n  return localStorage.getItem(TOKEN_KEY);\n};\n\nexport const removeToken = () => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\nexport const isAuthenticated = () => {\n  const token = getToken();\n  return !!token;\n}; "],"mappings":"AAAA,MAAMA,SAAS,GAAG,YAAY;AAE9B,OAAO,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EACjC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7BC,YAAY,CAACC,OAAO,CAACJ,SAAS,EAAEE,KAAK,CAAC;EACxC,CAAC,MAAM;IACLG,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEJ,KAAK,CAAC;EAC/C;AACF,CAAC;AAED,OAAO,MAAMK,QAAQ,GAAGA,CAAA,KAAM;EAC5B,OAAOJ,YAAY,CAACK,OAAO,CAACR,SAAS,CAAC;AACxC,CAAC;AAED,OAAO,MAAMS,WAAW,GAAGA,CAAA,KAAM;EAC/BN,YAAY,CAACO,UAAU,CAACV,SAAS,CAAC;AACpC,CAAC;AAED,OAAO,MAAMW,eAAe,GAAGA,CAAA,KAAM;EACnC,MAAMT,KAAK,GAAGK,QAAQ,CAAC,CAAC;EACxB,OAAO,CAAC,CAACL,KAAK;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}